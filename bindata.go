// Code generated by go-bindata.
// sources:
// template/controller/controller.go.tmpl
// template/controller/gen_controller.go.tmpl
// template/main.go.tmpl
// template/model/database/db.go.tmpl
// template/model/database/table.go.tmpl
// template/router/duplicateQuest.go.tmpl
// template/router/gen_router.go.tmpl
// template/router/router.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _controllerControllerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcd\x4a\x3b\x31\x14\xc5\xd7\x13\xc8\x3b\x5c\x66\xd5\xc2\x40\xfa\xff\x2f\x85\x59\xa9\xcb\x6e\xf4\x09\x62\x7a\x1b\x8a\xd3\x4c\x49\x32\x48\x29\x05\x07\x2c\x48\x57\x2e\xaa\xa0\x82\x1f\xa0\x3b\x61\x28\x8a\xe0\xaa\x2f\xe3\x7c\xf8\x16\x12\x67\x2a\xad\xab\x5c\xce\xcd\x39\x27\xbf\x30\x06\x12\x15\x6a\x6e\x11\x8e\xc6\x20\x85\xa4\x64\xc4\xc5\x31\x97\x08\x22\x56\x56\xc7\x51\x84\x9a\x12\x4a\x18\xcb\x67\x2f\xf9\x6c\x59\x5c\x7d\x14\xaf\x97\xe5\xcd\x59\xb5\x5a\xe4\xb7\x77\x9f\xab\xc7\x22\xcd\x28\xb1\xe3\x11\xc2\x01\x9a\x24\xb2\x60\xac\x4e\x84\x85\x09\x25\xde\x6e\xdc\x43\x18\x28\x4b\x89\xd7\x35\xd2\x6d\x06\x4a\x52\xe2\xed\x71\xcb\x9d\x8e\xba\xcf\x05\x4e\xa6\x94\x4c\xeb\x92\xaf\xc5\x75\x95\x65\xe5\xfc\xbd\x38\x4d\xcb\x87\x94\x12\x11\x2b\x63\xe1\x30\x11\x02\x8d\x01\x08\xe1\x7f\xa7\xb3\x56\xf7\xb5\x8e\x75\xad\xfd\xdb\xb4\xaf\x1f\xb5\xe5\x75\xfd\x21\xf8\xc5\xf9\x45\x3e\xbf\xf7\xb7\x22\x9a\x55\xfe\xb4\xac\xde\x9e\x7d\x97\xd4\x4f\x94\x68\x70\xba\x46\xb6\x44\x83\x01\xc1\xf0\x97\x02\x82\xde\x1f\x88\x76\xe3\x70\xe0\x8c\x69\x34\xb0\x13\x82\xc2\x93\x56\x2d\xb7\x29\xf1\x34\xda\x44\xab\x8d\x7b\x9e\x8b\x0e\xdc\x30\x34\xf2\xe7\x74\xa9\x6e\x70\x7f\xf2\x1d\x00\x00\xff\xff\x43\x87\x6a\x86\x9f\x01\x00\x00")

func controllerControllerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_controllerControllerGoTmpl,
		"controller/controller.go.tmpl",
	)
}

func controllerControllerGoTmpl() (*asset, error) {
	bytes, err := controllerControllerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "controller/controller.go.tmpl", size: 415, mode: os.FileMode(438), modTime: time.Unix(1526016105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _controllerGen_controllerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\xc1\x6a\xdb\x40\x10\x86\xef\x02\xbd\xc3\x74\x0f\x45\x02\xb3\x0a\x3d\x06\x7c\x49\x42\x0b\x2d\x4d\xd2\xba\xd0\xf3\x68\x35\x5e\xcb\x5e\xed\x8a\xd9\x51\x68\x10\x7a\xf7\xa2\x48\x81\xa4\xd8\x8d\x71\x7d\xe8\x51\x3b\xda\xf9\xe7\x9b\x6f\x8b\x02\x2c\x79\x62\x14\x82\xf2\x11\xac\xb1\x69\xd2\xa2\xd9\xa1\x25\x30\xc1\x0b\x07\xe7\x88\xd3\x24\x4d\xea\xa6\x0d\x2c\x90\xa5\x09\x80\xf2\x24\xc5\x46\xa4\x55\x4f\x5f\xb6\x96\x4d\x57\x6a\x13\x9a\xc2\x61\x19\x05\xcd\xae\x20\xb3\x09\x53\xb5\xef\xf5\x3d\x87\x2d\x19\xb9\xc5\x86\x86\xa1\x68\x42\x45\xae\xe8\xfb\xce\x57\xc4\xae\xf6\x04\xfa\xe6\x6a\xaa\xa9\x34\xc9\xc7\xb0\x75\xe7\x0d\xf4\x7d\xd7\xb6\xc4\xd7\xd8\x90\x03\xfd\x03\x4b\x47\xd3\x5f\x2b\x7c\xa0\xcc\xc0\x18\xa1\xaf\x83\x17\xfa\x25\x39\x10\x73\x60\xe8\xc7\x48\x80\x07\x64\x08\xe5\x16\xf6\x85\xe8\x83\x7d\xa7\xbb\x46\x5f\xd5\xbe\xca\xde\x87\x72\x9b\x4f\x27\x4c\xd2\xb1\x07\xa3\x3f\xaf\xee\x6e\xb3\x91\x5b\xaf\x04\xa5\x8b\x77\x5f\x16\xdf\x29\x76\x4e\xbe\x46\x9b\x7d\xb8\xb8\x58\xa8\xb0\x53\x8b\x50\x6e\xf5\xd3\x88\x79\x9e\xa7\xc9\xf0\x36\xcf\x0d\x39\x92\xff\x9d\x68\x1e\xf2\x0f\xa6\x4f\x24\x07\xc3\x7f\x6e\x88\xdf\xa0\x32\xc1\x57\x70\xb9\x04\xa3\xbf\x75\xc4\x8f\xf7\xc8\xd8\x64\x6a\x3c\x55\xf3\xa4\xc8\x16\x2e\x97\xaf\xeb\xc8\xf6\xb9\x3c\xae\x85\x29\x42\xed\x85\x78\x8d\x86\xfa\x99\xb9\x5e\x8f\x57\xdf\x2d\x95\x9a\xa3\x26\xec\x08\xcb\xbd\x1b\x3c\x82\x23\xf8\x6a\x81\x6c\xe7\xe0\x81\x5c\x24\x38\x63\xef\xe7\xbe\x27\x09\x62\x8a\xc7\x7b\xf9\x58\x73\x94\x7f\xf5\x72\x84\x9b\xbf\xfa\x39\xe8\xe8\xf4\x5d\xce\x5c\xaf\x3d\xed\x75\x75\x8e\x8c\x97\xfd\x5f\xbe\x82\x13\xbd\xfd\x0e\x00\x00\xff\xff\x6e\xde\xe3\x1b\x89\x05\x00\x00")

func controllerGen_controllerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_controllerGen_controllerGoTmpl,
		"controller/gen_controller.go.tmpl",
	)
}

func controllerGen_controllerGoTmpl() (*asset, error) {
	bytes, err := controllerGen_controllerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "controller/gen_controller.go.tmpl", size: 1417, mode: os.FileMode(438), modTime: time.Unix(1547544885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe5\xe2\xe5\xca\xcc\x2d\xc8\x2f\x2a\x51\xd0\xe0\xe5\x52\x50\x50\xaa\xae\xd6\x0b\x28\xca\xcf\x4a\x4d\x2e\xf1\x4b\xcc\x4d\xad\xad\xd5\x2f\xca\x2f\x2d\x49\x2d\x52\xe2\xe5\xd2\x04\xa9\x4d\x2b\xcd\x4b\x06\x6b\xd4\xd0\xac\xe6\xe5\xe2\x84\x48\xea\x05\x81\x29\x0d\x4d\x5e\xae\x5a\x5e\x2e\x40\x00\x00\x00\xff\xff\xf4\x0b\xd4\xcc\x5f\x00\x00\x00")

func mainGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mainGoTmpl,
		"main.go.tmpl",
	)
}

func mainGoTmpl() (*asset, error) {
	bytes, err := mainGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go.tmpl", size: 95, mode: os.FileMode(438), modTime: time.Unix(1525254979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelDatabaseDbGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x5f\x6b\x83\x30\x14\xc5\x9f\x0d\xe4\x3b\xdc\xc9\x28\x3a\x5a\xed\x5e\x07\xbe\xb4\x85\x51\xd8\x3f\x68\xdf\x47\x8c\x57\x17\x16\x13\x1b\x63\x69\x11\xbf\xfb\x48\x94\xd2\x16\xe6\x93\xf7\x9e\x93\xdf\xb9\xf7\xa6\x29\x54\xa8\xd0\x30\x8b\x05\xe4\x67\xa8\x78\x45\x49\xc3\xf8\x2f\xab\x10\xfa\xbe\x53\x05\x1a\x29\x14\x42\xf2\xc1\x6a\x1c\x06\x4a\xfa\x1e\x1e\x2d\xcb\x25\xc2\x4b\x06\xc9\xde\xff\xb9\x3e\x25\xa2\x6e\xb4\xb1\x10\x51\x12\x84\x95\xb0\x3f\x5d\x9e\x70\x5d\xa7\x55\xa7\x99\x2a\x59\x2d\xe4\x39\x6d\x0f\xf2\x14\x52\x12\x7c\xc3\x8d\x43\x2f\xda\x83\x5c\x14\x46\x1c\xd1\xa4\xf5\xb9\x3d\xc8\x90\x92\xd8\x31\x8f\xcc\x78\x60\x91\x6f\x55\xa9\x61\xfc\x9e\x1c\x26\xd9\xac\x26\x4f\xd9\x29\x0e\xaf\x68\x37\xab\x28\xbe\x68\xd0\x53\x12\x88\x12\xa6\x87\x0f\x19\x28\x21\x7d\x33\x30\x68\x3b\xa3\x26\x85\x92\x60\xa0\xc4\x51\xc7\x7a\x0e\x68\x8c\x5b\xcd\x73\xd6\x5a\x29\xe4\x36\x0a\xc7\xa1\xe6\x10\xf6\x7d\xb2\xd3\x9d\xe1\x38\x0c\xb3\x86\x99\x16\xf7\xa2\xc6\x6c\x6f\x3a\x9c\x49\xcd\xb3\x37\xcd\x99\x0c\xe3\x31\xdb\x91\xae\x83\x1b\xa6\x04\x8f\xd0\x98\x78\x4c\x9d\xb6\x4a\x76\x68\xdf\xd9\x69\x5b\x48\x74\x79\x6d\xb4\x8c\xef\xb5\xcf\x06\xd5\xa8\x3d\x2f\xaf\xd5\x2f\xa1\xaa\xc8\xd5\x77\x3b\x0d\x97\xbb\xac\xa5\x6e\xd1\x5f\xe6\xff\x83\x4c\xb0\xcd\x2a\xf1\xee\xe8\x76\x3c\xf0\x4e\xcf\xfc\x0b\x00\x00\xff\xff\xb2\x70\xa4\x74\x2e\x02\x00\x00")

func modelDatabaseDbGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_modelDatabaseDbGoTmpl,
		"model/database/db.go.tmpl",
	)
}

func modelDatabaseDbGoTmpl() (*asset, error) {
	bytes, err := modelDatabaseDbGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/database/db.go.tmpl", size: 558, mode: os.FileMode(438), modTime: time.Unix(1526016105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelDatabaseTableGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x5f\x6f\xdb\x36\x10\x7f\x9e\x00\x7d\x87\x2b\x11\x14\x52\x62\x30\xeb\x6b\x00\xa1\x40\x13\x27\x33\x96\x3f\x5b\xec\xa1\x0f\xc3\xd0\x50\xe2\x59\xa3\x27\x51\x2a\x49\x39\x35\x08\x7f\xf7\xe1\x28\xb9\x71\xea\xd8\x6b\xb6\xa7\xbd\x04\x11\x75\xf7\xd3\xef\xcf\xf1\x7c\x7a\x0a\x25\x6a\x34\xc2\xa1\x84\x7c\x05\x65\x51\xc6\x51\x2b\x8a\xbf\x44\x89\xe0\x7d\xa7\x25\x9a\x4a\x69\x04\x7e\xf1\xe1\x56\xd4\xb8\x5e\xc7\x51\x1c\xa9\xba\x6d\x8c\x83\x24\x8e\x00\x98\x53\x35\xb2\xf0\xdf\xbc\x76\x2c\x8e\x52\xaa\x58\x0a\x03\x9f\x20\x03\x7a\xc9\x6f\x9b\x47\x3a\x73\xab\x36\x60\xb6\x2d\x9a\x73\x51\x63\x05\x7c\x26\xf2\x0a\x7b\x5c\xb0\xce\x74\x85\x03\x4f\x50\xde\x83\x11\xba\x44\x38\x52\x23\x38\x5a\xc2\x59\x06\xfc\xbc\xa9\xba\x5a\x5b\x20\x0a\xf0\x1c\xe7\x68\xc9\x2f\x15\x56\x72\xbd\x06\xef\x8f\x96\xfc\xaa\x99\xad\x5a\xc2\x7c\x90\xf9\x19\x0b\x47\xc3\x7b\x06\x0b\xdb\xe8\x6f\xce\x1e\xc0\x7b\xd4\x92\x80\x83\xbc\xd3\xe3\x38\xb2\x62\x89\x71\x74\x7c\x1a\x47\xf3\x4e\x17\x90\x34\xf9\x02\x8e\xf7\x92\x4f\x61\x2a\x96\x98\xa4\xa0\xb4\x0b\x02\x48\xbf\xfd\x5c\x41\x06\x8c\x6d\x9e\x95\xa4\xd7\xf4\x24\x85\x13\xb9\xb0\x48\xba\xae\xd0\x5d\x7c\x48\x52\x3a\x56\xf3\xf0\x1d\x3e\x91\x90\x65\xe0\x3d\x6f\x8d\xaa\x85\x59\xfd\x8c\xab\x0b\x9c\x8b\xae\x72\x24\x90\x2a\xa1\x07\x67\x93\xdb\xe9\xf8\x7e\x06\x93\xdb\xd9\x1d\x3c\x78\xbf\x4d\xe9\x01\x12\xef\x4b\x74\x13\x6d\xd1\xb8\xde\xbc\xaf\x26\x12\xe3\xa5\xa8\x3a\xb4\x43\x55\x68\x0c\x7e\x9c\x37\x9d\x76\x76\xbb\x92\xf5\x5f\x34\x68\x89\xef\x86\x3b\xbf\xe9\xac\x1b\x7f\xc1\x22\xb1\x9f\xab\x51\x00\xb9\xcb\x17\x3b\xdf\x81\x74\xd3\xed\x94\x1c\xc1\x27\x82\x30\x68\xf9\xb5\xb0\x03\xb5\x89\x4c\x86\x1a\x25\x21\x23\x8b\x92\x50\x1c\x0e\xd7\x58\x59\x1c\x24\x6f\x44\x77\xad\x14\x0e\x77\xf5\x5a\x74\x10\x78\xfc\x16\x0a\x76\xa9\x3c\xfe\x89\x06\x41\xc9\xec\x3d\xdb\x20\xfe\x3b\x51\xa3\x21\xa5\xf4\x09\xe6\x9f\xd4\xfd\xf0\xb2\x3c\xfa\x63\xd0\x75\x46\x83\x92\x5b\xe3\x27\xb1\x42\xf7\xaa\x01\xbc\x08\x1d\x49\x0a\x79\xd3\x54\x83\x63\x7b\xe6\xac\x37\xf2\x2c\x83\x83\x56\xf6\x14\x88\xf3\x3b\xd8\xb5\xee\x65\xc7\xa0\x37\xe6\x29\x73\x12\xe6\x4c\x87\x41\x1a\x09\xbb\x42\x07\xd7\xca\x3a\x5a\x36\x1f\x09\x74\x4b\xe3\x15\xba\xbd\x02\x43\x6d\x52\x34\x5a\xd2\xa2\x50\xba\x1c\x81\x30\xa5\x05\xce\xb9\xd2\x0e\xcd\x5c\x14\xe8\xd7\x29\xfc\xfe\xc7\x7e\x93\xfa\xbb\xd3\xe4\x8b\x90\xf9\xa1\x4a\xbf\x3e\x70\x4d\x7b\xf3\xd8\x74\x7c\x3d\x3e\x9f\xc1\x37\xd7\x87\xfa\xb7\x6f\x0f\x5c\xde\xdf\xdd\xec\x1a\xfc\xf1\xa7\xf1\xfd\x78\xcb\xe2\x1f\x81\x0d\x1b\x20\x48\x7c\x43\x7b\xe3\xe9\xa6\x9f\x64\x0c\x84\x96\xc0\xe0\xa4\x7f\x7f\xc2\xb2\xf7\x7d\x47\x20\x8a\xc6\x3c\x9b\xe2\x29\x56\x58\xb8\xe4\x2d\x49\x1d\x41\x08\x86\xcc\xe2\x9c\x6f\xf6\x0c\x75\xbc\xc9\x40\xab\x6a\xb3\x50\xe6\xb5\xe3\xbf\x18\xa5\x5d\xa5\x13\x34\x66\x67\x3c\x09\x6b\x6b\x40\x29\xc7\x4b\x65\x5e\x1f\x64\x68\xfa\x8e\x20\x0f\x0c\xfb\xd7\x1c\x49\xf4\xdb\xff\x45\x88\xdf\x15\xe3\x50\x72\x3d\xb9\x99\xcc\xe0\x1d\x7b\x29\xd9\x5f\x3b\x34\xab\xfb\xe6\xf1\x4b\xf2\x2c\x55\x3e\x0d\x3f\x9e\xd3\x42\x68\x5a\x14\xff\x29\xe5\x10\xf2\xdf\x01\x00\x00\xff\xff\x71\x7d\x64\xbd\x18\x08\x00\x00")

func modelDatabaseTableGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_modelDatabaseTableGoTmpl,
		"model/database/table.go.tmpl",
	)
}

func modelDatabaseTableGoTmpl() (*asset, error) {
	bytes, err := modelDatabaseTableGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/database/table.go.tmpl", size: 2072, mode: os.FileMode(438), modTime: time.Unix(1547545983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerDuplicatequestGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xe4\x44\x10\x3d\xdb\xbf\xa2\xd6\x12\xa8\x0d\xa3\x36\x20\xc2\x61\xd0\x70\x59\x16\x82\x04\x51\xc4\x64\x85\x44\x14\xa1\x9e\x76\xcd\xb8\x65\xbb\x6d\xaa\xcb\x71\xcc\x6a\x6e\x10\xed\x0d\xae\x70\xe2\xc2\x0d\xa4\x1c\x39\x2c\xff\x86\x59\xf8\x19\xa8\xed\xf1\xc4\xf9\x38\x60\x29\x99\xe9\xea\xaa\xf7\x5e\xbd\xaa\x71\x92\xc0\x06\x2d\x92\x62\x84\x55\x07\x1b\xbd\x09\x6b\xa5\x73\xb5\x41\xa0\xaa\x61\xa4\x30\x34\x65\x5d\x11\x83\x08\x83\x88\x4d\x89\x51\x18\x44\x1b\xc3\x59\xb3\x92\xba\x2a\x93\x42\xad\x1c\x2b\x9d\x27\xa8\xb3\xca\xdf\x59\xe4\x24\x63\xae\xfd\xf7\x75\xc9\xfe\x43\x53\x57\x73\x95\x94\xe9\x91\x3f\x99\x2a\x0a\xe3\x30\xe4\xae\x46\x0f\xfa\x71\x53\x17\x46\x7b\x7e\xc7\xd4\x68\x86\x17\x61\x10\x7c\x89\xdf\x36\xe8\xf8\x73\xe3\x18\xfc\x53\xaa\xfa\xdc\x31\x19\xbb\xb9\xf0\x1a\xe4\x99\x29\x31\x0c\x82\xa7\x4a\x67\xf8\xc5\x12\x75\x65\xd3\xc0\x58\xfe\xe0\x7d\x1f\xcc\x50\xe7\xbe\x32\x38\xbf\x18\x6a\xc2\x60\xeb\x19\xd7\x8d\xd5\x70\x82\xed\x81\xd1\x09\xed\x01\x4a\x97\x42\x5f\x3c\xd3\xbe\xb4\xf0\xa4\x63\x69\x0c\x6f\xdd\x0a\x7c\x11\x06\x84\xdc\x90\x85\x37\x0f\xc1\x7b\x6a\xe7\xa5\xca\x51\x3c\x26\x37\x9e\xdd\x13\x3c\x1f\xc9\x67\x53\xd1\xf3\x83\x06\x1f\xde\x86\xdb\x30\x49\xe0\x94\x2a\x8d\xce\x81\x71\xc0\x19\x42\x69\xd2\xb4\xc0\x56\x11\x82\xef\x89\x4d\x65\xe5\xd0\x9d\x70\x13\xbd\xf1\x58\x27\x2c\x5e\x31\xf8\x01\xc9\x63\x65\xd3\x02\xe9\x93\xc6\xea\xf8\x41\x64\xd2\xa0\x47\x13\x7a\xc8\x78\x5a\x59\xc6\x2b\x8e\x01\x89\x2a\xea\xe7\xb3\xae\x08\xbe\x99\x5d\xc2\x7c\x41\xca\x6e\x10\x9c\x3c\x34\xe0\xaf\x03\xb3\x86\xcb\xc5\x42\xcb\x53\xc5\x99\x88\xfb\x50\x90\x24\xba\x40\x45\xd0\xd4\xf0\x1e\x38\xd4\x68\x53\x50\x36\x05\xa7\x2e\x11\x68\xb0\xb0\x4f\xf4\xe0\xf9\x8c\x27\xe0\x13\x83\x07\xac\x60\x5d\xb2\x3c\x25\x63\xb9\xb0\xa2\xb7\xf8\xa4\x6a\x45\x2c\x97\xcd\x4a\x70\x1c\x0f\x39\x69\x43\xca\x7b\x03\xf3\x05\x3c\xc8\x19\x52\xea\x3d\xc4\x98\xba\x0f\x9b\xf5\xb0\x10\x0f\xa1\x93\x77\xdf\xe9\x9f\xf8\x23\x27\xa7\xc3\xdc\xcb\x0a\x52\x2c\x90\x51\xdc\x91\x3c\x83\x7c\x8f\xbb\x0d\x6f\xff\x27\x89\x71\xa0\x49\xb9\xac\x3f\xe6\xd8\x79\x9d\x7a\x2c\x14\xb1\x3c\x46\x95\x22\xc9\x4f\x91\x45\xb4\x8f\xe6\xd8\x45\x03\x96\x59\x43\x8e\xdd\x62\x11\x45\x7b\xea\xfd\xe0\xfa\x89\x3d\x23\x7a\x6e\x55\xc3\x59\x45\xe6\x3b\x4c\x27\xac\xad\x27\x29\xd3\x23\x79\x82\xad\x18\x90\xa6\x56\x8e\x13\xdb\x73\x54\xf2\x2b\x32\x8c\xcb\x7e\x95\x45\x3b\x83\xf1\xfe\xed\x1c\xbb\x18\x00\x92\x64\x77\x73\xed\x98\x76\xd7\x3f\xef\x7e\xf8\x6d\xf7\xf2\xa6\xfd\xfb\xcf\x3f\xfa\xda\x32\x3d\xca\xb1\x9b\x2f\xc0\xc3\x2f\x7b\x9f\xd7\x22\x7a\xe3\x2a\x9a\x41\x2b\x97\x4d\x29\xac\x29\xe2\xd8\x23\xdc\x1e\x77\x37\xd7\xed\x3f\xbf\x7c\x9f\x29\x97\xfd\xfb\xd7\xef\xaf\x5f\xfe\x74\x7e\xb1\xea\x18\x5f\xff\xfa\x6a\xf7\xea\xc7\x70\x6c\xfb\xc9\x1d\x73\xcf\x07\xa2\x0b\xf9\x99\xfb\x1a\xa9\x12\x31\x3c\xe2\xc7\x09\xb6\xc7\x67\x67\xa7\xcf\xfc\xfe\x0a\xff\x72\x92\x4b\x56\xdc\xb8\x25\xd2\xa5\xd1\xf8\xdc\xaa\x4b\x65\x0a\xb5\x2a\x70\x68\x7c\x0b\x58\x38\x1c\x91\x1e\xe5\x83\xe9\x4e\x1d\xb6\x06\x89\xbc\xc1\xfe\xf7\x26\x74\xfc\x61\x7f\x7e\xb2\x00\x6b\x8a\x11\x2c\xd0\x72\x90\x81\x44\x77\xb6\x62\x14\x6c\x4d\x71\x3b\xaf\x6d\x38\xfc\xfd\x0f\xe8\x7b\xb8\xbe\x6a\x8a\xe8\xdf\x24\xff\x05\x00\x00\xff\xff\xe2\xaa\xa6\xa3\xed\x05\x00\x00")

func routerDuplicatequestGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_routerDuplicatequestGoTmpl,
		"router/duplicateQuest.go.tmpl",
	)
}

func routerDuplicatequestGoTmpl() (*asset, error) {
	bytes, err := routerDuplicatequestGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router/duplicateQuest.go.tmpl", size: 1517, mode: os.FileMode(438), modTime: time.Unix(1526016071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerGen_routerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x4a\xc3\x40\x14\x85\xe1\x75\x07\xe6\x1d\x2e\xb3\x4a\x44\x66\x9e\x41\xb4\x76\xa7\x85\x16\x5c\x4f\xa6\xc7\x24\x76\x92\x09\xb7\x37\x82\x0c\x79\x77\x89\x59\x88\x8b\xda\xec\xff\xf3\x71\x9c\xa3\x1a\x3d\xd8\x0b\xa8\xfa\xa2\x3a\xd4\x5a\x0d\x3e\x9c\x7d\x0d\xe2\x34\x0a\x58\x2b\xad\xda\x6e\x48\x2c\x54\x68\x45\x44\x64\x72\xb6\x7b\x4e\x1f\x08\xf2\xe2\x3b\x4c\x93\x0b\xa9\x17\x4e\x31\x82\xcd\x9c\x6c\x4c\xdd\x4a\x33\x56\x36\xa4\xce\x45\x5f\x5d\xc4\x87\xb3\x43\x68\x92\xd1\xaa\x9c\xc1\xf7\xb1\x0f\x94\xf3\x38\x0c\xe0\x47\xdf\x21\x92\x3d\xfa\x2a\x62\xf1\x1e\x4e\xa7\x02\x74\x37\x0f\xec\x36\x34\xa9\xcc\x5a\x6d\x60\xf7\xaf\x87\x63\x61\xdc\xd5\xd9\xc1\x7f\xc2\xdc\xff\x7e\xb1\xff\x96\xe5\x2a\xf3\x09\x11\xb2\x52\x5d\xda\xc5\xdd\x6d\x67\x76\x07\xb9\x5a\xbf\x35\xe0\xbf\xf0\xcd\x7a\x2d\xfd\xdc\xf2\x45\x56\xd3\x3f\x75\xa9\xd5\xa4\xd5\x77\x00\x00\x00\xff\xff\x16\x03\x2f\xeb\x0e\x02\x00\x00")

func routerGen_routerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_routerGen_routerGoTmpl,
		"router/gen_router.go.tmpl",
	)
}

func routerGen_routerGoTmpl() (*asset, error) {
	bytes, err := routerGen_routerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router/gen_router.go.tmpl", size: 526, mode: os.FileMode(438), modTime: time.Unix(1526016080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerRouterGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4d\x8b\xdb\x30\x10\x86\xcf\x16\xe8\x3f\x4c\x45\x0e\x0a\x04\xe9\x1e\x48\xa1\x84\x7e\x40\xcb\x6e\x89\xb7\xf4\xd2\x8b\x22\x4f\x15\xb3\xb2\x64\xc6\x63\x6f\x8b\xd1\x7f\x2f\x72\x0a\xbd\xb4\xf4\x22\x18\x9e\x77\x98\x47\xaf\xb5\x10\x30\x21\x39\x46\xb8\xfe\x84\xe0\x83\x14\xa3\xf3\xcf\x2e\x20\x50\x9e\x19\x49\x0a\x29\xfa\x61\xcc\xc4\xa0\xa5\x00\x00\x50\x09\xd9\xde\x98\x47\x55\xe7\x46\x85\x9e\x6f\xf3\xd5\xf8\x3c\xd8\xe8\xae\x13\x3b\xff\x6c\xd1\xdf\xf2\x7f\xb0\x1d\xfa\xae\x8b\xf8\xe2\x08\x95\x14\xfb\x7a\xe7\xfb\x9c\x3c\x5c\xb6\xb3\x7a\xbf\x4a\xd1\xe0\xf1\x54\xa3\xe6\x01\x5f\xf4\xbe\xce\xe6\xcb\x84\xfa\xcf\xa2\xf9\x94\x43\xa8\xe1\xbf\xc2\x0b\xfa\xbc\xfc\x93\x9e\x1f\x2f\xed\x86\xa4\x68\xac\xbd\x9f\x85\xd3\x6b\xb8\xb9\xd4\xc5\xfa\xef\x06\xcd\xfb\xb7\x4f\x5a\x59\x75\x80\x6a\xa6\x3d\x6c\x32\xe7\x9c\x18\x7f\xf0\x1e\x90\x28\x13\x54\xcf\x86\x90\x67\x4a\xe0\x4d\xcb\xd4\xa7\xa0\x6b\x3d\xa6\x65\xc7\xf3\xf4\xf8\xf1\x00\xea\x03\xc6\x98\x0f\xf0\x35\x53\xec\x5e\x7d\x4b\xaa\x1a\x95\xfa\xac\x2b\x90\x4b\x01\x61\xd7\x1f\x60\xb7\xc0\xf1\x04\xe6\xc9\x5d\x23\x3e\xb8\x01\xa7\x52\xb6\xc8\x3c\x8e\x48\x67\x37\x60\x84\xdd\x52\xca\x9b\xae\xd3\x78\x5f\xc6\xd4\x6d\x19\x6b\xa1\x65\x47\x0c\x13\xd2\xf2\x5b\xfe\xde\x8d\x79\xe7\xd8\x45\x8d\x66\xe3\x5a\x1d\xd7\xd5\xb4\x48\x4b\xef\xf1\x73\x26\x2e\x45\xd5\x0e\x8a\x14\xbf\x02\x00\x00\xff\xff\x5a\x31\x01\x6f\x0b\x02\x00\x00")

func routerRouterGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_routerRouterGoTmpl,
		"router/router.go.tmpl",
	)
}

func routerRouterGoTmpl() (*asset, error) {
	bytes, err := routerRouterGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router/router.go.tmpl", size: 523, mode: os.FileMode(438), modTime: time.Unix(1526016080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"controller/controller.go.tmpl":     controllerControllerGoTmpl,
	"controller/gen_controller.go.tmpl": controllerGen_controllerGoTmpl,
	"main.go.tmpl":                      mainGoTmpl,
	"model/database/db.go.tmpl":         modelDatabaseDbGoTmpl,
	"model/database/table.go.tmpl":      modelDatabaseTableGoTmpl,
	"router/duplicateQuest.go.tmpl":     routerDuplicatequestGoTmpl,
	"router/gen_router.go.tmpl":         routerGen_routerGoTmpl,
	"router/router.go.tmpl":             routerRouterGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"controller": &bintree{nil, map[string]*bintree{
		"controller.go.tmpl":     &bintree{controllerControllerGoTmpl, map[string]*bintree{}},
		"gen_controller.go.tmpl": &bintree{controllerGen_controllerGoTmpl, map[string]*bintree{}},
	}},
	"main.go.tmpl": &bintree{mainGoTmpl, map[string]*bintree{}},
	"model": &bintree{nil, map[string]*bintree{
		"database": &bintree{nil, map[string]*bintree{
			"db.go.tmpl":    &bintree{modelDatabaseDbGoTmpl, map[string]*bintree{}},
			"table.go.tmpl": &bintree{modelDatabaseTableGoTmpl, map[string]*bintree{}},
		}},
	}},
	"router": &bintree{nil, map[string]*bintree{
		"duplicateQuest.go.tmpl": &bintree{routerDuplicatequestGoTmpl, map[string]*bintree{}},
		"gen_router.go.tmpl":     &bintree{routerGen_routerGoTmpl, map[string]*bintree{}},
		"router.go.tmpl":         &bintree{routerRouterGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
