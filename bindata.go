// Code generated by go-bindata.
// sources:
// template/controller/controller.go.tmpl
// template/controller/gen_controller.go.tmpl
// template/main.go.tmpl
// template/model/database/db.go.tmpl
// template/model/database/table.go.tmpl
// template/router/gen_router.go.tmpl
// template/router/router.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _controllerControllerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcd\x4a\x3b\x31\x14\xc5\xd7\x13\xc8\x3b\x5c\xba\x6a\xa1\x90\xfe\xff\x4b\x61\x56\xea\xb2\x1b\x7d\x82\x98\xde\x86\xc1\x69\x66\x48\x32\x48\x29\x05\x07\x2c\x48\x57\x2e\xaa\xa0\x82\x1f\xa0\x3b\x61\x28\x8a\xe0\xaa\x2f\xe3\x7c\xf8\x16\x12\x67\x2a\xad\xab\x5c\xce\xcd\x39\x27\xbf\x30\x06\x12\x15\x6a\x6e\x11\x8e\xc6\x20\x03\x15\x5b\x4a\x62\x2e\x8e\xb9\x44\x10\x91\xb2\x3a\x0a\x43\xd4\x94\x50\xc2\x58\x3e\x7b\xc9\x67\xcb\xe2\xea\xa3\x78\xbd\x2c\x6f\xce\xaa\xd5\x22\xbf\xbd\xfb\x5c\x3d\x16\x69\x46\x89\x1d\xc7\x08\x07\x68\x92\xd0\x82\xb1\x3a\x11\x16\x26\x94\x78\xbb\xd1\x00\x21\x50\x96\x12\xaf\x6f\xa4\xdb\x04\x4a\x52\xe2\xed\x71\xcb\x9d\x8e\x7a\xc8\x05\x4e\xa6\x94\x4c\xeb\x92\xaf\xc5\x75\x95\x65\xe5\xfc\xbd\x38\x4d\xcb\x87\x94\x12\x11\x29\x63\xe1\x30\x11\x02\x8d\x01\xf0\xe1\x7f\xaf\xb7\x56\xf7\xb5\x8e\x74\xad\xfd\xdb\xb4\xaf\x1f\xb5\xe5\x75\xfd\x3e\xb4\x8a\xf3\x8b\x7c\x7e\xdf\xda\x8a\x68\x56\xf9\xd3\xb2\x7a\x7b\x6e\xb9\xa4\x61\xa2\x44\x83\xd3\x37\xb2\x2d\x1a\x0c\xe8\x8e\x7e\x29\xa0\x3b\xf8\x03\xd1\x69\x1c\x0e\x9c\x31\x8d\x06\x76\x7c\x50\x78\xd2\xae\xe5\x0e\x25\x9e\x46\x9b\x68\xb5\x71\xcf\x73\xd1\x5d\x37\x8c\x8c\xfc\x39\x5d\xaa\x1b\xdc\x9f\x7c\x07\x00\x00\xff\xff\x66\x15\x43\x9b\xa1\x01\x00\x00")

func controllerControllerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_controllerControllerGoTmpl,
		"controller/controller.go.tmpl",
	)
}

func controllerControllerGoTmpl() (*asset, error) {
	bytes, err := controllerControllerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "controller/controller.go.tmpl", size: 417, mode: os.FileMode(438), modTime: time.Unix(1525240335, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _controllerGen_controllerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x6b\xdb\x40\x10\x85\xef\x02\xfd\x87\xe9\x1e\x8a\x04\x66\x15\x7a\x0c\xf8\x92\x84\x16\x5a\x9a\xa4\x75\xa1\xe7\xd1\x6a\x2c\xaf\xbd\xda\x15\xb3\x23\xd3\x20\xf4\xdf\x8b\x22\x19\x92\x52\x37\xae\x73\xc9\x51\x3b\xa3\xf7\xe6\xbd\xaf\x28\xa0\x26\x4f\x8c\x42\x50\x3e\x40\x6d\x7d\x2b\x69\xd2\xa2\xd9\x61\x4d\x60\x82\x17\x0e\xce\x11\xa7\x49\x9a\xd8\xa6\x0d\x2c\x90\xa5\x09\x80\xf2\x24\xc5\x46\xa4\x55\x8f\x5f\xb5\x95\x4d\x57\x6a\x13\x9a\xc2\x61\x19\x05\xcd\xae\x20\xb3\x09\xd3\xb4\xef\xf5\x3d\x87\x2d\x19\xb9\xc5\x86\x86\xa1\x68\x42\x45\xae\xe8\xfb\xce\x57\xc4\xce\x7a\x02\x7d\x73\x35\xcd\x54\x9a\xe4\xa3\xd9\xba\xf3\x06\xfa\xbe\x6b\x5b\xe2\x6b\x6c\xc8\x81\xfe\x81\xa5\xa3\x69\x6b\x85\x7b\xca\x0c\x8c\x16\xfa\x3a\x78\xa1\x5f\x92\x03\x31\x07\x86\x7e\xb4\x04\xd8\x23\x43\x28\xb7\x10\x89\xf7\xd6\x90\x3e\x2a\x35\xad\x1b\x7d\x65\x7d\x95\xbd\x0f\xe5\x36\x9f\x5e\x98\xa4\x63\x0f\x46\x7f\x5e\xdd\xdd\x66\x63\x54\xbd\x12\x94\x2e\xde\x7d\x59\x7c\xa7\xd8\x39\xf9\x1a\xeb\xec\xc3\xc5\xc5\x42\x85\x9d\x5a\x84\x72\xab\x1f\xaf\xca\xf3\x3c\x4d\x86\x97\x23\xdc\x90\x23\x79\x83\x21\xe6\xbb\xfe\x88\xf1\x89\xe4\xa8\xf9\xcf\x0d\xf1\x0b\x41\x4c\xf0\x15\x5c\x2e\xc1\xe8\x6f\x1d\xf1\xc3\x3d\x32\x36\x99\x1a\x5f\xd5\x7c\x29\x72\x0d\x97\xcb\xe7\x73\xe4\xfa\x30\x1e\x9b\x60\x8a\x60\xbd\x10\xaf\xd1\x50\x3f\x67\xb6\xeb\xf1\xd7\x77\x4b\xa5\x66\xab\x29\x76\x84\xe5\xa1\xb4\x13\x4e\x0f\xbe\x5a\x20\xd7\xb3\xd7\x40\x2e\x12\xbc\x4e\xee\x20\x75\x16\x06\xa6\x78\x7a\xfb\x1f\x2d\x47\x79\x6d\xfb\x27\x10\xf8\x27\x85\xa3\x24\xfe\xab\xbe\x39\xca\x73\x1a\x7f\x25\x72\xa6\xec\x53\xc9\xa7\x78\xcf\xa4\xf3\x3b\x00\x00\xff\xff\x5e\x60\x5d\x91\x3d\x05\x00\x00")

func controllerGen_controllerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_controllerGen_controllerGoTmpl,
		"controller/gen_controller.go.tmpl",
	)
}

func controllerGen_controllerGoTmpl() (*asset, error) {
	bytes, err := controllerGen_controllerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "controller/gen_controller.go.tmpl", size: 1341, mode: os.FileMode(438), modTime: time.Unix(1525327390, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe5\xe2\xe5\xca\xcc\x2d\xc8\x2f\x2a\x51\xd0\xe0\xe5\x52\x50\x50\xaa\xae\xd6\x0b\x28\xca\xcf\x4a\x4d\x2e\xf1\x4b\xcc\x4d\xad\xad\xd5\x2f\xca\x2f\x2d\x49\x2d\x52\xe2\xe5\xd2\x04\xa9\x4d\x2b\xcd\x4b\x06\x6b\xd4\xd0\xac\xe6\xe5\xe2\x84\x48\xea\x05\x81\x29\x0d\x4d\x5e\xae\x5a\x5e\x2e\x40\x00\x00\x00\xff\xff\xf4\x0b\xd4\xcc\x5f\x00\x00\x00")

func mainGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mainGoTmpl,
		"main.go.tmpl",
	)
}

func mainGoTmpl() (*asset, error) {
	bytes, err := mainGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go.tmpl", size: 95, mode: os.FileMode(438), modTime: time.Unix(1525254979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelDatabaseDbGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x5f\x6b\x83\x30\x14\xc5\x9f\x0d\xe4\x3b\xdc\xc9\x28\x3a\x5a\xed\x5e\x07\xbe\xb4\x85\x51\xd8\x3f\x68\xdf\x47\x8c\x57\x17\x16\x13\x1b\x63\x69\x11\xbf\xfb\x48\x94\xd2\x16\xe6\x93\xf7\x9e\x93\xdf\xb9\xf7\xa6\x29\x54\xa8\xd0\x30\x8b\x05\xe4\x67\xa8\x84\x6a\x2c\x25\x0d\xe3\xbf\xac\x42\xe8\xfb\x4e\x15\x68\xa4\x50\x08\xc9\x07\xab\x71\x18\x28\xe9\x7b\x78\xb4\x2c\x97\x08\x2f\x19\x24\x7b\xff\xe7\xfa\x94\x88\xba\xd1\xc6\x42\x44\x49\x10\x56\xc2\xfe\x74\x79\xc2\x75\x9d\x56\x9d\x66\xaa\x64\xb5\x90\xe7\xb4\x3d\xc8\x53\x48\x49\xf0\x0d\x37\x0e\xbd\x68\x0f\x72\x51\x18\x71\x44\x93\xd6\xe7\xf6\x20\x43\x4a\x62\xc7\x3c\x32\xe3\x81\x45\xbe\x55\xa5\x86\xf1\x7b\x72\x98\x64\xb3\x9a\x3c\x65\xa7\x38\xbc\xa2\xdd\xac\xa2\xf8\xa2\x41\x4f\x49\x20\x4a\x98\x1e\x3e\x64\xa0\x84\xf4\xcd\xc0\xa0\xed\x8c\x9a\x14\x4a\x82\x81\x12\x47\x1d\xeb\x39\xa0\x31\x6e\x35\xcf\x59\x6b\xa5\x90\xdb\x28\x1c\x87\x9a\x43\xd8\xf7\xc9\x4e\x77\x86\xe3\x30\xcc\x1a\x66\x5a\xdc\x8b\x1a\xb3\xbd\xe9\x70\x26\x35\xcf\xde\x34\x67\x32\x8c\xc7\x6c\x47\xba\x0e\x6e\x98\x12\x3c\x42\x63\xe2\x31\x75\xda\x2a\xd9\xa1\x7d\x67\xa7\x6d\x21\xd1\xe5\xb5\xd1\x32\xbe\xd7\x3e\x1b\x54\xa3\xf6\xbc\xbc\x56\xbf\x84\xaa\x22\x57\xdf\xed\x34\x5c\xee\xb2\x96\xba\x45\x7f\x99\xff\x0f\x32\xc1\x36\xab\xc4\xbb\xa3\xdb\xf1\xc0\x3b\x3d\xf3\x2f\x00\x00\xff\xff\xa7\x93\x5b\xda\x30\x02\x00\x00")

func modelDatabaseDbGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_modelDatabaseDbGoTmpl,
		"model/database/db.go.tmpl",
	)
}

func modelDatabaseDbGoTmpl() (*asset, error) {
	bytes, err := modelDatabaseDbGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/database/db.go.tmpl", size: 560, mode: os.FileMode(438), modTime: time.Unix(1525411430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelDatabaseTableGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xda\x48\x10\x7e\x3e\x4b\xfe\x0f\xd3\x55\x54\xd9\x09\x5a\xd2\xd7\x48\x56\xa5\x26\x24\x45\x22\xe4\x0e\x38\xf5\xa1\xaa\xca\xda\x3b\x70\x4b\xed\xb5\xbb\xbb\x26\x45\x16\xff\xfd\x34\x6b\x68\xe0\x08\xa4\xb9\x7b\xb9\x97\x28\x9e\x9d\xf9\x76\xbe\xef\x9b\x1d\xba\x5d\x98\xa3\x46\x23\x1c\x4a\x48\x57\x30\x57\xba\x72\x61\x50\x89\xec\x9b\x98\x23\x34\x4d\xad\x25\x9a\x5c\x69\x04\x7e\xf3\x61\x28\x0a\x5c\xaf\xc3\x20\x0c\x54\x51\x95\xc6\x41\x14\x06\x00\xcc\xa9\x02\x99\xff\x6f\x56\x38\x16\x06\x31\x65\x2c\x85\x81\xaf\x90\x00\x1d\xf2\x61\xf9\x48\x31\xb7\xaa\x3c\x66\x55\xa1\xb9\x16\x05\xe6\xc0\x27\x22\xcd\xb1\xc5\x05\xeb\x4c\x9d\x39\x68\x08\xaa\x69\xc0\x08\x3d\x47\x38\x53\x1d\x38\x5b\xc2\x55\x02\xfc\xba\xcc\xeb\x42\x5b\xa0\x16\x60\x1f\xe7\x6c\xc9\x6f\x15\xe6\x72\xbd\x86\xa6\x39\x5b\xf2\xbb\x72\xb2\xaa\x08\x73\x2a\xd3\x2b\xe6\x43\x9b\x73\x06\x0b\x5b\xea\x7f\xc4\xa6\xd0\x34\xa8\x25\x01\x7b\x7a\xdd\xf3\x30\xb0\x62\x89\x61\x70\xde\x0d\x83\x59\xad\x33\x88\xca\x74\x01\xe7\x47\x9b\x8f\x61\x2c\x96\x18\xc5\xa0\xb4\xf3\x04\x88\xbf\xfd\x9e\x43\x02\x8c\x6d\xbf\x95\xa4\x63\xfa\x92\xc2\x89\x54\x58\x24\x5e\x77\xe8\x6e\x3e\x44\x31\x85\xd5\xcc\xdf\xc3\xfb\x12\x92\x04\x2e\xe3\x56\x0b\x68\x81\x58\x7f\x38\xee\x8d\x26\xd0\x1f\x4e\x1e\x60\xda\x34\xbb\xd7\x4f\x21\x6a\x9a\x39\x3a\x1f\xf2\xac\x28\x6e\x7f\x6a\x46\x0d\x2e\x45\x5e\xa3\x3d\x48\xbc\x2e\x6b\xed\xf6\x32\x59\x7b\xa9\x41\x4b\xed\x6d\x5b\xe5\xf7\xb5\x75\xbd\x1f\x98\x45\xf6\x7b\xde\xf1\x20\x0f\xe9\xa2\xad\xda\xa9\x86\x78\x5b\xed\x94\xec\xc0\x57\x82\x30\x68\xf9\x40\x58\xd7\xd7\x16\x8d\xeb\xcb\x68\x93\xa3\x24\x24\xa4\x48\xe4\x93\x7d\x70\x8d\xb9\xc5\x0d\xeb\x2d\xef\xba\x92\xc2\xe1\x21\x65\x8b\x0e\x7c\x1f\x7f\xfa\x84\xc3\x56\x1e\xff\x42\x83\xa0\x64\xf2\x9e\x6d\x11\xff\x1d\xa9\xce\xc6\x94\xf8\x09\xe6\x25\x76\xbf\x3d\x4f\x8f\xfe\x18\x74\xb5\xd1\xa0\xe4\xce\xb4\x49\xcc\xd1\xbd\x6a\xde\x6e\x7c\x45\x14\x43\x5a\x96\xf9\x46\xb1\x23\x63\xd5\x0a\x79\x95\xc0\x49\x29\xdb\x16\xa8\xe7\x77\x70\x28\xdd\xf3\x8a\x41\x2b\xcc\x93\xe7\x44\xcc\x99\x1a\x3d\x35\x22\x76\x87\x0e\x06\xca\x3a\xda\x2e\x9f\x08\x74\x87\xe3\x1d\xba\xa3\x04\x7d\x6e\x94\x95\x5a\xd2\x5e\x50\x7a\xde\x01\x61\xe6\x16\x38\xe7\x4a\x3b\x34\x33\x91\x61\xb3\x8e\xe1\xf3\x97\xe3\x22\xb5\xcf\xa7\x4c\x17\xde\xf3\x53\x99\x8d\x37\xa6\xdb\xa5\x57\xea\xf3\x13\x28\xc4\x37\x8c\x3e\x7f\xf9\x98\xde\xa0\x13\x2a\xef\xc0\x65\x7c\xe2\xe5\xb6\x02\xb3\x71\x6f\xd0\xbb\x9e\xc0\x0b\x6f\x11\x6e\x47\x0f\xf7\x87\x26\x7c\xfa\xd8\x1b\xf5\x76\x6c\xb8\x04\xb6\x59\x0a\x5e\x86\x37\xb4\x4a\x9e\x16\xc2\x45\xc2\x40\x68\x09\x0c\x2e\xda\xf3\x0b\x96\xbc\x6f\x2b\x3c\x19\x34\x66\x6f\xd2\xc7\x98\x63\xe6\xa2\xb7\x44\xaf\x03\xde\x3c\x12\x94\x73\xbe\x5d\x3d\x54\xf1\x26\x01\xad\xf2\xed\xde\x99\x15\x8e\xff\x6e\x94\x76\xb9\x8e\xd0\x98\x83\x11\x26\xac\x9d\x21\x26\xaf\x6f\x95\x79\xbd\xd9\xbe\xe8\x17\xcc\x3e\xf1\x20\x7e\x7a\x4d\xa4\xdf\xbe\x60\xf4\xff\xc3\xc4\x5f\xb2\x71\x93\x32\xe8\xdf\xf7\x27\xf0\x8e\x3d\xe7\xec\x1f\x35\x9a\xd5\xa8\x7c\xfc\x11\xed\xb9\xca\xc7\xfe\xf7\x74\x9c\x09\x4d\xcb\xe4\x3f\xb9\xec\x4d\xfe\x3b\x00\x00\xff\xff\xeb\x83\x58\xfc\x2d\x08\x00\x00")

func modelDatabaseTableGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_modelDatabaseTableGoTmpl,
		"model/database/table.go.tmpl",
	)
}

func modelDatabaseTableGoTmpl() (*asset, error) {
	bytes, err := modelDatabaseTableGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/database/table.go.tmpl", size: 2093, mode: os.FileMode(438), modTime: time.Unix(1525327360, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerGen_routerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x4a\xc3\x40\x14\x85\xe1\x75\x07\xe6\x1d\x2e\xb3\x4a\x44\x66\x9e\x41\xb4\x76\xa7\x85\x16\x5c\x4f\xa6\xc7\x24\x76\x92\x09\xb7\x37\x82\x0c\x79\x77\x89\x59\x88\x8b\xda\xec\xff\xf3\x71\x9c\xa3\x1a\x3d\xd8\x0b\xa8\xfa\xa2\xba\xed\x07\xd1\x6a\xf0\xe1\xec\x6b\x10\xa7\x51\xc0\x5a\x69\xd5\x76\x43\x62\xa1\x42\x2b\x22\x22\x93\xb3\xdd\x73\xfa\x40\x90\x17\xdf\x61\x9a\x5c\x48\xbd\x70\x8a\x11\x6c\xe6\x64\x63\xea\x56\x9a\xb1\xb2\x21\x75\x2e\xfa\xea\x22\x3e\x9c\x1d\x42\x93\x8c\x56\xe5\x0c\xbe\x8f\x7d\xa0\x9c\xc7\x61\x00\x3f\xfa\x0e\x91\xec\xd1\x57\x11\x8b\xf7\x70\x3a\x15\xa0\xbb\x79\x60\xb7\xa1\x49\x65\xd6\x6a\x03\xbb\x7f\x3d\x1c\x0b\xe3\xae\xce\x0e\xfe\x13\xe6\xfe\xf7\x8b\xfd\xb7\x2c\x57\x99\x4f\x88\x90\x95\xea\xd2\x2e\xee\x6e\x3b\xb3\x3b\xc8\xd5\xfa\xad\x01\xff\x85\x6f\xd6\x6b\xe9\xe7\x96\x2f\xb2\x9a\xfe\xa9\x4b\xad\x26\xad\xbe\x03\x00\x00\xff\xff\x97\xdf\x9c\x2e\x10\x02\x00\x00")

func routerGen_routerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_routerGen_routerGoTmpl,
		"router/gen_router.go.tmpl",
	)
}

func routerGen_routerGoTmpl() (*asset, error) {
	bytes, err := routerGen_routerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router/gen_router.go.tmpl", size: 528, mode: os.FileMode(438), modTime: time.Unix(1525253852, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerRouterGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4d\x8b\xdb\x30\x10\x86\xcf\x16\xe8\x3f\x4c\x45\x0e\x0a\x04\xe9\x1e\x48\xa1\x84\x7e\x40\xcb\x6e\x89\xb7\xf4\xd2\x8b\x22\x4f\x15\xb3\xb2\x64\xc6\x63\x6f\x8b\xd1\x7f\x2f\x72\x0a\xbd\xb4\xf4\x22\x18\x9e\x77\x98\x47\xaf\xb5\x10\x30\x21\x39\x46\xb8\xfe\x84\xd0\xa7\x91\xa5\x18\x9d\x7f\x76\x01\x81\xf2\xcc\x48\x52\x48\xd1\x0f\x63\x26\x06\x2d\x05\x00\x80\x4a\xc8\xf6\xc6\x3c\xaa\x3a\x37\x2a\xf4\x7c\x9b\xaf\xc6\xe7\xc1\x46\x77\x9d\xd8\xf9\x67\x8b\xfe\x96\xff\x83\xed\xd0\x77\x5d\xc4\x17\x47\xa8\xa4\xd8\xd7\x3b\xdf\xe7\xe4\xe1\xb2\x9d\xd5\xfb\x55\x8a\x06\x8f\xa7\x1a\x35\x0f\xf8\xa2\xf7\x75\x36\x5f\x26\xd4\x7f\x16\xcd\xa7\x1c\x42\x0d\xff\x15\x5e\xd0\xe7\xe5\x9f\xf4\xfc\x78\x69\x37\x24\x45\x63\xed\xfd\x2c\x9c\x5e\xc3\xcd\xa5\x2e\xd6\x7f\x37\x68\xde\xbf\x7d\xd2\xca\xaa\x03\x54\x33\xed\x61\x93\x39\xe7\xc4\xf8\x83\xf7\x80\x44\x99\xa0\x7a\x36\x84\x3c\x53\x02\x6f\x5a\xa6\x3e\x05\x5d\xeb\x31\x2d\x3b\x9e\xa7\xc7\x8f\x07\x50\x1f\x30\xc6\x7c\x80\xaf\x99\x62\xf7\xea\x5b\x52\xd5\xa8\xd4\x67\x5d\x81\x5c\x0a\x08\xbb\xfe\x00\xbb\x05\x8e\x27\x30\x4f\xee\x1a\xf1\xc1\x0d\x38\x95\xb2\x45\xe6\x71\x44\x3a\xbb\x01\x23\xec\x96\x52\xde\x74\x9d\xc6\xfb\x32\xa6\x6e\xcb\x58\x0b\x2d\x3b\x62\x98\x90\x96\xdf\xf2\xf7\x6e\xcc\x3b\xc7\x2e\x6a\x34\x1b\xd7\xea\xb8\xae\xa6\x45\x5a\x7a\x8f\x9f\x33\x71\x29\xaa\x76\x50\xa4\xf8\x15\x00\x00\xff\xff\x6b\x07\x92\xc2\x0d\x02\x00\x00")

func routerRouterGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_routerRouterGoTmpl,
		"router/router.go.tmpl",
	)
}

func routerRouterGoTmpl() (*asset, error) {
	bytes, err := routerRouterGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router/router.go.tmpl", size: 525, mode: os.FileMode(438), modTime: time.Unix(1525252909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"controller/controller.go.tmpl": controllerControllerGoTmpl,
	"controller/gen_controller.go.tmpl": controllerGen_controllerGoTmpl,
	"main.go.tmpl": mainGoTmpl,
	"model/database/db.go.tmpl": modelDatabaseDbGoTmpl,
	"model/database/table.go.tmpl": modelDatabaseTableGoTmpl,
	"router/gen_router.go.tmpl": routerGen_routerGoTmpl,
	"router/router.go.tmpl": routerRouterGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"controller": &bintree{nil, map[string]*bintree{
		"controller.go.tmpl": &bintree{controllerControllerGoTmpl, map[string]*bintree{}},
		"gen_controller.go.tmpl": &bintree{controllerGen_controllerGoTmpl, map[string]*bintree{}},
	}},
	"main.go.tmpl": &bintree{mainGoTmpl, map[string]*bintree{}},
	"model": &bintree{nil, map[string]*bintree{
		"database": &bintree{nil, map[string]*bintree{
			"db.go.tmpl": &bintree{modelDatabaseDbGoTmpl, map[string]*bintree{}},
			"table.go.tmpl": &bintree{modelDatabaseTableGoTmpl, map[string]*bintree{}},
		}},
	}},
	"router": &bintree{nil, map[string]*bintree{
		"gen_router.go.tmpl": &bintree{routerGen_routerGoTmpl, map[string]*bintree{}},
		"router.go.tmpl": &bintree{routerRouterGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

