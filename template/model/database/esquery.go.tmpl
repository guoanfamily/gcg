// generated by gcg
package {{underline .DBName}}

import (
  "time"
  "fmt"
  {{if eq .PrimaryKeyType "int"}}
  "strconv" {{- end}}
  "context"
)

var _ = time.Now

/*
ES Create
*/
func (obj *{{upperCamel .TableName}}) ESCreate() interface{}{

  put, err := client.Index().
  		Index("{{.TableName}}").
          {{if eq .PrimaryKeyType "int"}}
           Id(strconv.Itoa(obj.{{upperCamel .PrimaryKey}})).
           {{- else}}
           Id(obj.{{upperCamel .PrimaryKey}}).
           {{- end}}
  		BodyJson(obj).
  		Do(context.Background())
  	if err != nil {
  		fmt.Println(err)
  	}
  return put.Id
}

/*
ES delete
*/
func (obj *{{upperCamel .TableName}}) ESDelete() bool{
    res, err := client.Delete().Index("{{.TableName}}").
          {{if eq .PrimaryKeyType "int"}}
         Id(strconv.Itoa(obj.{{upperCamel .PrimaryKey}})).
         {{- else}}
         Id(obj.{{upperCamel .PrimaryKey}}).
         {{- end}}
            Do(context.Background())
    if err != nil {
        println(err.Error())
        return false
    }
    fmt.Printf("delete result %s\n", res.Result)
    return true
}


/*
ES Update
*/
func (obj *{{upperCamel .TableName}}) ESUpdate() bool {
  res, err := client.Update().
      Index("{{.TableName}}").
     {{if eq .PrimaryKeyType "int"}}
        Id(strconv.Itoa(obj.{{upperCamel .PrimaryKey}})).
        {{- else}}
        Id(obj.{{upperCamel .PrimaryKey}}).
        {{- end}}
      Doc(obj).
      Do(context.Background())
  if err != nil {
      println(err.Error())
  }
  fmt.Printf("update age %s\n", res.Result)
  return true
}

/*
ES Gets
*/
func ESGet{{upperCamel .TableName}}(id string) interface{} {
  var obj interface{}
  //通过id查找
  get1, err := client.Get().Index("{{.TableName}}").Id(id).Do(context.Background())
  if err != nil {
      fmt.Println(err)
  }
  if get1.Found {
    //set value
    obj =get1.Source
    fmt.Printf("Got document %s in version %d from index %s, type %s\n", get1.Id, get1.Version, get1.Index, get1.Type)
  }
  return obj
}
